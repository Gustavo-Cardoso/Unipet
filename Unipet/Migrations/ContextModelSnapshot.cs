// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unipet.Data;

namespace Unipet.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PerfilClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioPerfil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuarioTokens");
                });

            modelBuilder.Entity("Unipet.Models.AreaCobertura", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int");

                    b.Property<string>("NomeArea")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdArea");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdMunicipio");

                    b.ToTable("AreaCobertura");

                    b.HasData(
                        new
                        {
                            IdArea = 1,
                            ExibirHome = true,
                            IdEmpresa = 2,
                            IdMunicipio = 1,
                            NomeArea = "Area 1"
                        },
                        new
                        {
                            IdArea = 2,
                            ExibirHome = true,
                            IdEmpresa = 3,
                            IdMunicipio = 2,
                            NomeArea = "Area 2"
                        },
                        new
                        {
                            IdArea = 3,
                            ExibirHome = true,
                            IdEmpresa = 2,
                            IdMunicipio = 3,
                            NomeArea = "Area 3"
                        },
                        new
                        {
                            IdArea = 4,
                            ExibirHome = true,
                            IdEmpresa = 1,
                            IdMunicipio = 4,
                            NomeArea = "Area 4"
                        },
                        new
                        {
                            IdArea = 5,
                            ExibirHome = true,
                            IdEmpresa = 1,
                            IdMunicipio = 5,
                            NomeArea = "Area 5"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Blog", b =>
                {
                    b.Property<int>("IdPublicacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPublicacao")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdPublicacao");

                    b.ToTable("Blog");

                    b.HasData(
                        new
                        {
                            IdPublicacao = 1,
                            DataPublicacao = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "img/blog/blog-1.png",
                            Texto = "Cães, gatos, gorilas, tigres e ursos estão entre os protegidos. De recompensa, eles ganham marshmallows e sorvete",
                            Titulo = "EUA e Rússia dão largada à imunização de animais contra a Covid-19"
                        },
                        new
                        {
                            IdPublicacao = 2,
                            DataPublicacao = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "img/blog/blog-2.png",
                            Texto = "Empresas apostam na internet e adotam modelo de assinatura para a venda de ração de animais de estimação, segmento que faturou para o setor quase 10 bilhões em 2012",
                            Titulo = "No mercado de pets, a moda agora é vender por assinatura"
                        },
                        new
                        {
                            IdPublicacao = 3,
                            DataPublicacao = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "img/blog/blog-3.png",
                            Texto = "Serviço estará disponível no aplicativo Meu Vivo inicialmente para clientes das capitais São Paulo, Rio de Janeiro, Belo Horizonte e regiões metropolitanas",
                            Titulo = "Vivo terá canal para clientes que quiserem adotar pets"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Contato", b =>
                {
                    b.Property<int>("IdContato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdContato");

                    b.ToTable("Contato");

                    b.HasData(
                        new
                        {
                            IdContato = 1,
                            Assunto = "Elogio",
                            Celular = "(16) 98910-7852",
                            Email = "laura.ribeiro@hotmail.com",
                            Mensagem = "Eu agradeço a Unipet , porque no momento que mais precisei a Unipet me ajudou muito. Me sinto feliz e aliviada porque tenho o plano de saúde e sempre contei com ele. Estou muito satisfeita e a equipe Unipet sempre esteve disposta a satisfazer o cliente.",
                            Nome = "Laura Analu Carla Ribeiro",
                            Telefone = "(16) 3968-6516"
                        },
                        new
                        {
                            IdContato = 2,
                            Assunto = "Elogio",
                            Celular = "(16) 99195-8396",
                            Email = "daniel.mata@gmail.com",
                            Mensagem = "A Unipet é perfeita!!! O site e o atendimento são maravilhosos e os profissionais muito atenciosos. Fiquei muito feliz com o atendimento dado ao meu cãozinho.",
                            Nome = "Daniel André Francisco da Mata",
                            Telefone = "(16) 3792-9234"
                        },
                        new
                        {
                            IdContato = 3,
                            Assunto = "Depoimento",
                            Celular = "(11) 98991-8021",
                            Email = "eduardo.nunes@gmail.com",
                            Mensagem = "O atendimento da Unipet é indescritível!!! Total carinho e cuidado com meu filhote. O pessoal da clínica, como um todo, é muito atencioso.",
                            Nome = "Eduardo Yago Nunes",
                            Telefone = "(11) 2726-0341"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Contrato", b =>
                {
                    b.Property<int>("IdContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataTermino")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdPet")
                        .HasColumnType("int");

                    b.Property<int>("IdPlano")
                        .HasColumnType("int");

                    b.Property<int>("IdTutor")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorCombinado")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdContrato");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdPet");

                    b.HasIndex("IdPlano");

                    b.HasIndex("IdTutor");

                    b.ToTable("Contrato");

                    b.HasData(
                        new
                        {
                            IdContrato = 1,
                            DataInicio = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTermino = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpresa = 1,
                            IdPet = 1,
                            IdPlano = 1,
                            IdTutor = 1,
                            ValorCombinado = 49m
                        },
                        new
                        {
                            IdContrato = 2,
                            DataInicio = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTermino = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpresa = 2,
                            IdPet = 2,
                            IdPlano = 2,
                            IdTutor = 2,
                            ValorCombinado = 79m
                        },
                        new
                        {
                            IdContrato = 3,
                            DataInicio = new DateTime(2021, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTermino = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpresa = 3,
                            IdPet = 3,
                            IdPlano = 3,
                            IdTutor = 3,
                            ValorCombinado = 120m
                        },
                        new
                        {
                            IdContrato = 4,
                            DataInicio = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTermino = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpresa = 4,
                            IdPet = 4,
                            IdPlano = 4,
                            IdTutor = 4,
                            ValorCombinado = 55m
                        },
                        new
                        {
                            IdContrato = 5,
                            DataInicio = new DateTime(2021, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataTermino = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpresa = 5,
                            IdPet = 5,
                            IdPlano = 5,
                            IdTutor = 5,
                            ValorCombinado = 49m
                        });
                });

            modelBuilder.Entity("Unipet.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Logotipo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdEmpresa");

                    b.HasIndex("IdEndereco");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Empresa");

                    b.HasData(
                        new
                        {
                            IdEmpresa = 1,
                            CNPJ = "75727887000113",
                            Email = "contato@estimapet.com.br",
                            ExibirHome = true,
                            Fone = "(16) 2733-7453",
                            IdEndereco = 1,
                            Logotipo = "img/empresas/estima-pet.png",
                            RazaoSocial = "Estima Pet"
                        },
                        new
                        {
                            IdEmpresa = 2,
                            CNPJ = "46070005000191",
                            Email = "suporte@petsepeople.com",
                            ExibirHome = true,
                            Fone = "(11) 2584-5154",
                            IdEndereco = 2,
                            Logotipo = "img/empresas/pets&people.png",
                            RazaoSocial = "Pets&People"
                        },
                        new
                        {
                            IdEmpresa = 3,
                            CNPJ = "94117416000138",
                            Email = "contato@animalclub.com.br",
                            ExibirHome = true,
                            Fone = "(16) 2740-8918",
                            IdEndereco = 3,
                            Logotipo = "img/empresas/animalclub.png",
                            RazaoSocial = "Animal Club"
                        },
                        new
                        {
                            IdEmpresa = 4,
                            CNPJ = "51013786000112",
                            Email = "faleconosco@chiquinho.com.br",
                            ExibirHome = true,
                            Fone = "(14) 3845-1744",
                            IdEndereco = 4,
                            Logotipo = "img/empresas/saochiquinho.png",
                            RazaoSocial = "São Chiquinho"
                        },
                        new
                        {
                            IdEmpresa = 5,
                            CNPJ = "358307421340",
                            Email = "petdoctor@petdoctor.com",
                            ExibirHome = true,
                            Fone = "(14) 2595-9878",
                            IdEndereco = 5,
                            Logotipo = "img/empresas/petdoctor.png",
                            RazaoSocial = "Pet doctor"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("NumeroCasa")
                        .HasMaxLength(9)
                        .HasColumnType("int");

                    b.HasKey("IdEndereco");

                    b.HasIndex("IdMunicipio");

                    b.ToTable("Endereco");

                    b.HasData(
                        new
                        {
                            IdEndereco = 1,
                            Bairro = "Quintino Facci II",
                            CEP = "14070280",
                            IdMunicipio = 1,
                            Logradouro = "Rua Deputado Orlando Jurca",
                            NumeroCasa = 243
                        },
                        new
                        {
                            IdEndereco = 2,
                            Bairro = "Centro",
                            CEP = "03960000",
                            IdMunicipio = 2,
                            Logradouro = "Avenida Paulista",
                            NumeroCasa = 542
                        },
                        new
                        {
                            IdEndereco = 3,
                            Bairro = "Jardim dos Bosques",
                            CEP = "14830970",
                            IdMunicipio = 3,
                            Logradouro = "Rua Quinze de Novembro 152",
                            NumeroCasa = 586
                        },
                        new
                        {
                            IdEndereco = 4,
                            Bairro = "Centro",
                            CEP = "17340970",
                            IdMunicipio = 4,
                            Logradouro = "Rua Winifrida",
                            NumeroCasa = 270
                        },
                        new
                        {
                            IdEndereco = 5,
                            Bairro = "Altos da Cidade",
                            CEP = "17064853",
                            IdMunicipio = 5,
                            Logradouro = "Rua Treze de Maio",
                            NumeroCasa = 564
                        },
                        new
                        {
                            IdEndereco = 6,
                            Bairro = "Vila Mariana",
                            CEP = "14140280",
                            IdMunicipio = 1,
                            Logradouro = "Rua Colômbia",
                            NumeroCasa = 142
                        },
                        new
                        {
                            IdEndereco = 7,
                            Bairro = "Ipiranga",
                            CEP = "03965000",
                            IdMunicipio = 2,
                            Logradouro = "Rua Porto Seguro",
                            NumeroCasa = 403
                        },
                        new
                        {
                            IdEndereco = 8,
                            Bairro = "Vila Monte Alegre",
                            CEP = "14844970",
                            IdMunicipio = 3,
                            Logradouro = "Travessa Atíllio Poli",
                            NumeroCasa = 785
                        },
                        new
                        {
                            IdEndereco = 9,
                            Bairro = "Jardim da Barra",
                            CEP = "17350000",
                            IdMunicipio = 4,
                            Logradouro = "Rua Santo Gatto",
                            NumeroCasa = 25
                        },
                        new
                        {
                            IdEndereco = 10,
                            Bairro = "Centro",
                            CEP = "17064853",
                            IdMunicipio = 5,
                            Logradouro = "Rua Virgilio Marta",
                            NumeroCasa = 245
                        },
                        new
                        {
                            IdEndereco = 11,
                            Bairro = "Campos Elíseos",
                            CEP = "14080220",
                            IdMunicipio = 1,
                            Logradouro = "Rua Luiz Gama",
                            NumeroCasa = 952
                        },
                        new
                        {
                            IdEndereco = 12,
                            Bairro = "Jardim Santa Terezinha (Parelheiros)",
                            CEP = "04896030",
                            IdMunicipio = 2,
                            Logradouro = "Rua Plácido Rutini",
                            NumeroCasa = 741
                        },
                        new
                        {
                            IdEndereco = 13,
                            Bairro = "Centro",
                            CEP = "14830970",
                            IdMunicipio = 3,
                            Logradouro = "Rua Quinze de Novembro 152",
                            NumeroCasa = 241
                        },
                        new
                        {
                            IdEndereco = 14,
                            Bairro = "Centro",
                            CEP = "17340970",
                            IdMunicipio = 4,
                            Logradouro = "Rua Winifrida 270",
                            NumeroCasa = 648
                        },
                        new
                        {
                            IdEndereco = 15,
                            Bairro = "Vila Aviação",
                            CEP = "17018650",
                            IdMunicipio = 5,
                            Logradouro = "Avenida Alcindo Dias Soares",
                            NumeroCasa = 974
                        });
                });

            modelBuilder.Entity("Unipet.Models.Especialidade", b =>
                {
                    b.Property<int>("IdEspecialidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeEspecialidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEspecialidade");

                    b.ToTable("Especialidade");

                    b.HasData(
                        new
                        {
                            IdEspecialidade = 1,
                            NomeEspecialidade = "Consulta geral"
                        },
                        new
                        {
                            IdEspecialidade = 2,
                            NomeEspecialidade = "Vacinas"
                        },
                        new
                        {
                            IdEspecialidade = 3,
                            NomeEspecialidade = "Urgência/emergência"
                        },
                        new
                        {
                            IdEspecialidade = 4,
                            NomeEspecialidade = "Exames laboratoriais"
                        },
                        new
                        {
                            IdEspecialidade = 5,
                            NomeEspecialidade = "Exames de imagem"
                        },
                        new
                        {
                            IdEspecialidade = 6,
                            NomeEspecialidade = "Fisioterapia"
                        },
                        new
                        {
                            IdEspecialidade = 7,
                            NomeEspecialidade = "Ortopedia"
                        },
                        new
                        {
                            IdEspecialidade = 8,
                            NomeEspecialidade = "Cirurgia"
                        },
                        new
                        {
                            IdEspecialidade = 9,
                            NomeEspecialidade = "Internação"
                        });
                });

            modelBuilder.Entity("Unipet.Models.EspecialidadePlano", b =>
                {
                    b.Property<int>("IdPlano")
                        .HasColumnType("int");

                    b.Property<int>("IdEspecialidade")
                        .HasColumnType("int");

                    b.HasKey("IdPlano", "IdEspecialidade");

                    b.HasIndex("IdEspecialidade");

                    b.ToTable("EspecialidadePlano");

                    b.HasData(
                        new
                        {
                            IdPlano = 1,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 1,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 1,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 2,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 7
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 8
                        },
                        new
                        {
                            IdPlano = 3,
                            IdEspecialidade = 9
                        },
                        new
                        {
                            IdPlano = 4,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 4,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 4,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 5,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 7
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 8
                        },
                        new
                        {
                            IdPlano = 6,
                            IdEspecialidade = 9
                        },
                        new
                        {
                            IdPlano = 7,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 7,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 7,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 7
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 8
                        },
                        new
                        {
                            IdPlano = 8,
                            IdEspecialidade = 9
                        },
                        new
                        {
                            IdPlano = 9,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 9,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 9,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 10,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 7
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 8
                        },
                        new
                        {
                            IdPlano = 11,
                            IdEspecialidade = 9
                        },
                        new
                        {
                            IdPlano = 12,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 12,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 12,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 1
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 2
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 3
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 4
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 5
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 6
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 7
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 8
                        },
                        new
                        {
                            IdPlano = 13,
                            IdEspecialidade = 9
                        });
                });

            modelBuilder.Entity("Unipet.Models.Especie", b =>
                {
                    b.Property<int>("IdEspecie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeEspecie")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEspecie");

                    b.ToTable("Especie");

                    b.HasData(
                        new
                        {
                            IdEspecie = 1,
                            NomeEspecie = "Cachorro"
                        },
                        new
                        {
                            IdEspecie = 2,
                            NomeEspecie = "Gato"
                        },
                        new
                        {
                            IdEspecie = 3,
                            NomeEspecie = "Pássaro"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Municipio", b =>
                {
                    b.Property<int>("IdMunicipio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdUF")
                        .HasColumnType("int");

                    b.Property<string>("NomeMunicipio")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IdMunicipio");

                    b.HasIndex("IdUF");

                    b.ToTable("Municipio");

                    b.HasData(
                        new
                        {
                            IdMunicipio = 1,
                            IdUF = 1,
                            NomeMunicipio = "Ribeirão Preto"
                        },
                        new
                        {
                            IdMunicipio = 2,
                            IdUF = 2,
                            NomeMunicipio = "São Paulo"
                        },
                        new
                        {
                            IdMunicipio = 3,
                            IdUF = 3,
                            NomeMunicipio = "Rincão"
                        },
                        new
                        {
                            IdMunicipio = 4,
                            IdUF = 4,
                            NomeMunicipio = "Barra Bonita"
                        },
                        new
                        {
                            IdMunicipio = 5,
                            IdUF = 5,
                            NomeMunicipio = "Bauru"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Pet", b =>
                {
                    b.Property<int>("IdPet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdEspecie")
                        .HasColumnType("int");

                    b.Property<int>("IdPorte")
                        .HasColumnType("int");

                    b.Property<int>("IdRaca")
                        .HasColumnType("int");

                    b.Property<int>("IdTutor")
                        .HasColumnType("int");

                    b.Property<string>("NomePet")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdPet");

                    b.HasIndex("IdEspecie");

                    b.HasIndex("IdPorte");

                    b.HasIndex("IdRaca");

                    b.HasIndex("IdTutor");

                    b.ToTable("Pet");

                    b.HasData(
                        new
                        {
                            IdPet = 1,
                            DataNascimento = new DateTime(2018, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "",
                            IdEspecie = 1,
                            IdPorte = 1,
                            IdRaca = 1,
                            IdTutor = 1,
                            NomePet = "Xulico",
                            Sexo = "M"
                        },
                        new
                        {
                            IdPet = 2,
                            DataNascimento = new DateTime(2018, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "",
                            IdEspecie = 2,
                            IdPorte = 1,
                            IdRaca = 4,
                            IdTutor = 2,
                            NomePet = "Safira",
                            Sexo = "F"
                        },
                        new
                        {
                            IdPet = 3,
                            DataNascimento = new DateTime(2015, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "",
                            IdEspecie = 3,
                            IdPorte = 1,
                            IdRaca = 5,
                            IdTutor = 3,
                            NomePet = "Loro",
                            Sexo = "F"
                        },
                        new
                        {
                            IdPet = 4,
                            DataNascimento = new DateTime(2000, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "",
                            IdEspecie = 1,
                            IdPorte = 3,
                            IdRaca = 2,
                            IdTutor = 4,
                            NomePet = "Thor",
                            Sexo = "M"
                        },
                        new
                        {
                            IdPet = 5,
                            DataNascimento = new DateTime(2014, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExibirHome = true,
                            Foto = "",
                            IdEspecie = 2,
                            IdPorte = 1,
                            IdRaca = 1,
                            IdTutor = 5,
                            NomePet = "Nino",
                            Sexo = "M"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Plano", b =>
                {
                    b.Property<int>("IdPlano")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("NomePlano")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IdPlano");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Plano");

                    b.HasData(
                        new
                        {
                            IdPlano = 1,
                            Descricao = "Um plano de saúde básico, acessível para você e essencial para o seu melhor amigo.",
                            ExibirHome = true,
                            IdArea = 4,
                            IdEmpresa = 1,
                            NomePlano = "Pet Bronze",
                            Valor = 49m
                        },
                        new
                        {
                            IdPlano = 2,
                            Descricao = "Um plano de saúde essencial, acessível e abrangente para você e o melhor para o seu melhor amigo.",
                            ExibirHome = true,
                            IdArea = 4,
                            IdEmpresa = 1,
                            NomePlano = "Pet Silver",
                            Valor = 79m
                        },
                        new
                        {
                            IdPlano = 3,
                            Descricao = "Um plano de saúde completo, abrangente e robusto para você e para o seu melhor amigo.",
                            ExibirHome = true,
                            IdArea = 5,
                            IdEmpresa = 1,
                            NomePlano = "Pet Golden",
                            Valor = 120m
                        },
                        new
                        {
                            IdPlano = 4,
                            Descricao = "O Basic é o nosso plano focado em assistência preventiva para o seu melhor amigo!",
                            ExibirHome = true,
                            IdArea = 1,
                            IdEmpresa = 2,
                            NomePlano = "Basic",
                            Valor = 59m
                        },
                        new
                        {
                            IdPlano = 5,
                            Descricao = "O Plus é o nosso plano ideal para assegurar a saúde do seu pet sem ter surpresas no seu bolso!",
                            ExibirHome = true,
                            IdArea = 1,
                            IdEmpresa = 2,
                            NomePlano = "Plus",
                            Valor = 89m
                        },
                        new
                        {
                            IdPlano = 6,
                            Descricao = "O Advanced é o nosso plano top, sinta-se seguro, com ele seu pet tem acesso ao que há de melhor!",
                            ExibirHome = true,
                            IdArea = 3,
                            IdEmpresa = 2,
                            NomePlano = "Advanced ",
                            Valor = 220m
                        },
                        new
                        {
                            IdPlano = 7,
                            Descricao = "Um plano que oferece os cuidados básicos com a saúde do seu pet.",
                            ExibirHome = true,
                            IdArea = 2,
                            IdEmpresa = 3,
                            NomePlano = "Essencial",
                            Valor = 59m
                        },
                        new
                        {
                            IdPlano = 8,
                            Descricao = "Um plano para surpreender. Oferece uma rede premium e tratamentos complementares ao seu melhor amigo. Além de contemplar todas as coberturas do plano Essencial.",
                            ExibirHome = true,
                            IdArea = 2,
                            IdEmpresa = 3,
                            NomePlano = "Completo",
                            Valor = 200m
                        },
                        new
                        {
                            IdPlano = 9,
                            Descricao = "O plano de saúde mais econômico do mercado e básico para seu pet.",
                            ExibirHome = true,
                            IdArea = 4,
                            IdEmpresa = 4,
                            NomePlano = "Simples",
                            Valor = 55m
                        },
                        new
                        {
                            IdPlano = 10,
                            Descricao = "O plano de saúde completo e de melhor custo/benefício para você.",
                            ExibirHome = true,
                            IdArea = 5,
                            IdEmpresa = 4,
                            NomePlano = "Completo",
                            Valor = 99m
                        },
                        new
                        {
                            IdPlano = 11,
                            Descricao = "O melhor plano de saúde para você e para seu pet.",
                            ExibirHome = true,
                            IdArea = 5,
                            IdEmpresa = 4,
                            NomePlano = "Especial",
                            Valor = 150m
                        },
                        new
                        {
                            IdPlano = 12,
                            Descricao = "PET I é para quem procura tranquilidade, atendimento e não quer tem imprevistos com a saúde do seu pet",
                            ExibirHome = true,
                            IdArea = 5,
                            IdEmpresa = 5,
                            NomePlano = "Pet I",
                            Valor = 99m
                        },
                        new
                        {
                            IdPlano = 13,
                            Descricao = "PET II é para quem procura cobertura total e o melhor em se tratando de saúde pet",
                            ExibirHome = true,
                            IdArea = 5,
                            IdEmpresa = 5,
                            NomePlano = "Pet II",
                            Valor = 250m
                        });
                });

            modelBuilder.Entity("Unipet.Models.Porte", b =>
                {
                    b.Property<int>("IdPorte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomePorte")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdPorte");

                    b.ToTable("Porte");

                    b.HasData(
                        new
                        {
                            IdPorte = 1,
                            NomePorte = "P"
                        },
                        new
                        {
                            IdPorte = 2,
                            NomePorte = "M"
                        },
                        new
                        {
                            IdPorte = 3,
                            NomePorte = "G"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Prestador", b =>
                {
                    b.Property<int>("IdPrestador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Logotipo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdPrestador");

                    b.HasIndex("IdEndereco");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Prestador");

                    b.HasData(
                        new
                        {
                            IdPrestador = 1,
                            CNPJ = "34107012000131",
                            Email = "contato@petmais.com.br",
                            ExibirHome = true,
                            Fone = "(16) 2849-9496",
                            IdEndereco = 11,
                            Logotipo = "",
                            RazaoSocial = "Clínica Pet+"
                        },
                        new
                        {
                            IdPrestador = 2,
                            CNPJ = "05457918000188",
                            Email = "comercial@vetsaofrancisco.com.br",
                            ExibirHome = true,
                            Fone = "(11) 3623-5462",
                            IdEndereco = 12,
                            Logotipo = "",
                            RazaoSocial = "Clínica Veterinária São Francisco"
                        },
                        new
                        {
                            IdPrestador = 3,
                            CNPJ = "75511709000150",
                            Email = "comercial@centrovet.com.br",
                            ExibirHome = true,
                            Fone = "(16) 3623-5462",
                            IdEndereco = 13,
                            Logotipo = "",
                            RazaoSocial = "Centro Veterinário"
                        },
                        new
                        {
                            IdPrestador = 4,
                            CNPJ = "42874432000171",
                            Email = "contato@proanalys.com.br",
                            ExibirHome = true,
                            Fone = "(14) 3675-4544",
                            IdEndereco = 14,
                            Logotipo = "",
                            RazaoSocial = "ProAnalysy PET"
                        },
                        new
                        {
                            IdPrestador = 5,
                            CNPJ = "87134850000160",
                            Email = "comercial@sopet.com.br",
                            ExibirHome = true,
                            Fone = "(14) 3234-7888",
                            IdEndereco = 15,
                            Logotipo = "",
                            RazaoSocial = "Centro Veterinário SÓPET"
                        });
                });

            modelBuilder.Entity("Unipet.Models.PrestadorEmpresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdPrestador")
                        .HasColumnType("int");

                    b.HasKey("IdEmpresa", "IdPrestador");

                    b.HasIndex("IdPrestador");

                    b.ToTable("PrestadorEmpresa");

                    b.HasData(
                        new
                        {
                            IdEmpresa = 1,
                            IdPrestador = 1
                        },
                        new
                        {
                            IdEmpresa = 2,
                            IdPrestador = 2
                        },
                        new
                        {
                            IdEmpresa = 3,
                            IdPrestador = 3
                        },
                        new
                        {
                            IdEmpresa = 4,
                            IdPrestador = 4
                        },
                        new
                        {
                            IdEmpresa = 5,
                            IdPrestador = 5
                        });
                });

            modelBuilder.Entity("Unipet.Models.Raca", b =>
                {
                    b.Property<int>("IdRaca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEspecie")
                        .HasColumnType("int");

                    b.Property<string>("NomeRaca")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdRaca");

                    b.HasIndex("IdEspecie");

                    b.ToTable("Raca");

                    b.HasData(
                        new
                        {
                            IdRaca = 1,
                            IdEspecie = 1,
                            NomeRaca = "Raça Indefinida"
                        },
                        new
                        {
                            IdRaca = 2,
                            IdEspecie = 1,
                            NomeRaca = "Pastor Alemão"
                        },
                        new
                        {
                            IdRaca = 4,
                            IdEspecie = 2,
                            NomeRaca = "Persa"
                        },
                        new
                        {
                            IdRaca = 5,
                            IdEspecie = 3,
                            NomeRaca = "Papagaio"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Relato", b =>
                {
                    b.Property<int>("IdRelato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("IdRelato");

                    b.ToTable("Relato");

                    b.HasData(
                        new
                        {
                            IdRelato = 1,
                            ExibirHome = true,
                            Foto = "img/testimonial/testimonial-1.png",
                            Nome = "Laura Analu Carla Ribeiro",
                            Texto = "Eu agradeço a Unipet , porque no momento que mais precisei a Unipet me ajudou muito. Me sinto feliz e aliviada porque tenho o plano de saúde e sempre contei com ele. Estou muito satisfeita e a equipe Unipet sempre esteve disposta a satisfazer o cliente."
                        },
                        new
                        {
                            IdRelato = 2,
                            ExibirHome = true,
                            Foto = "img/testimonial/testimonial-2.png",
                            Nome = "Daniel André Francisco da Mata",
                            Texto = "A Unipet é perfeita!!! O site e o atendimento são maravilhosos e os profissionais muito atenciosos. Fiquei muito feliz com o atendimento dado ao meu cãozinho."
                        },
                        new
                        {
                            IdRelato = 3,
                            ExibirHome = true,
                            Foto = "img/testimonial/testimonial-3.png",
                            Nome = "Eduardo Yago Nunes",
                            Texto = "O atendimento da Unipet é indescritível!!! Total carinho e cuidado com meu filhote. O pessoal da clínica, como um todo, é muito atencioso."
                        });
                });

            modelBuilder.Entity("Unipet.Models.Tutor", b =>
                {
                    b.Property<int>("IdTutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ExibirHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Foto")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NomeTutor")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdTutor");

                    b.HasIndex("IdEndereco");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Tutor");

                    b.HasData(
                        new
                        {
                            IdTutor = 1,
                            CPF = "49474113840",
                            Celular = "(16) 99195-8396",
                            Email = "daniel.mata@gmail.com",
                            ExibirHome = true,
                            Fone = "(16) 3792-9234",
                            Foto = "img/tutor/tutor-1.png",
                            IdEndereco = 6,
                            NomeTutor = "Daniel André Francisco da Mata",
                            RG = "424854752",
                            Sexo = "M"
                        },
                        new
                        {
                            IdTutor = 2,
                            CPF = "65838512881",
                            Celular = "(11) 98991-8021",
                            Email = "eduardo.nunes@gmail.com",
                            ExibirHome = true,
                            Fone = "(11) 2726-0341",
                            Foto = "img/tutor/tutor-2.png",
                            IdEndereco = 7,
                            NomeTutor = "Eduardo Yago Nunes",
                            RG = "312398669",
                            Sexo = "M"
                        },
                        new
                        {
                            IdTutor = 3,
                            CPF = "46180447802",
                            Celular = "(16) 98910-7852",
                            Email = "laura.ribeiro@hotmail.com",
                            ExibirHome = true,
                            Fone = "(16) 3968-6516",
                            Foto = "img/tutor/tutor-3.png",
                            IdEndereco = 8,
                            NomeTutor = "Laura Analu Carla Ribeiro",
                            RG = "473961702",
                            Sexo = "F"
                        },
                        new
                        {
                            IdTutor = 4,
                            CPF = "80503642835",
                            Celular = "(14) 98783-6149",
                            Email = "fernando.rodrigues@hotmail.com",
                            ExibirHome = true,
                            Fone = "(14) 3964-2127",
                            Foto = "img/tutor/tutor-4.png",
                            IdEndereco = 9,
                            NomeTutor = "Fernando Lorenzo Rodrigues",
                            RG = "318776066",
                            Sexo = "M"
                        },
                        new
                        {
                            IdTutor = 5,
                            CPF = "64446567888",
                            Celular = "(14) 99952-7294",
                            Email = "liz.rodrigues@gmail.com",
                            ExibirHome = true,
                            Fone = "(14) 3733-2834",
                            Foto = "img/tutor/tutor-5.png",
                            IdEndereco = 10,
                            NomeTutor = "Liz Evelyn Alice Rodrigues",
                            RG = "434533622",
                            Sexo = "F"
                        });
                });

            modelBuilder.Entity("Unipet.Models.UF", b =>
                {
                    b.Property<int>("IdUF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeEstado")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdUF");

                    b.ToTable("UF");

                    b.HasData(
                        new
                        {
                            IdUF = 1,
                            NomeEstado = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            IdUF = 2,
                            NomeEstado = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            IdUF = 3,
                            NomeEstado = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            IdUF = 4,
                            NomeEstado = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            IdUF = 5,
                            NomeEstado = "São Paulo",
                            Sigla = "SP"
                        });
                });

            modelBuilder.Entity("Unipet.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("longblob");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LimiteAlteracaoNomeUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Unipet.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Unipet.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Unipet.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Unipet.Models.AreaCobertura", b =>
                {
                    b.HasOne("Unipet.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("IdMunicipio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Unipet.Models.Contrato", b =>
                {
                    b.HasOne("Unipet.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("IdPet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("IdPlano")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("IdTutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Pet");

                    b.Navigation("Plano");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Unipet.Models.Empresa", b =>
                {
                    b.HasOne("Unipet.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Unipet.Models.Endereco", b =>
                {
                    b.HasOne("Unipet.Models.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("IdMunicipio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Unipet.Models.EspecialidadePlano", b =>
                {
                    b.HasOne("Unipet.Models.Especialidade", "Especialidade")
                        .WithMany("EspecialidadesPlanos")
                        .HasForeignKey("IdEspecialidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Plano", "Plano")
                        .WithMany("EspecialidadesPlanos")
                        .HasForeignKey("IdPlano")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("Unipet.Models.Municipio", b =>
                {
                    b.HasOne("Unipet.Models.UF", "UF")
                        .WithMany()
                        .HasForeignKey("IdUF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UF");
                });

            modelBuilder.Entity("Unipet.Models.Pet", b =>
                {
                    b.HasOne("Unipet.Models.Especie", "Especie")
                        .WithMany()
                        .HasForeignKey("IdEspecie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Porte", "Porte")
                        .WithMany()
                        .HasForeignKey("IdPorte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Raca", "Raca")
                        .WithMany()
                        .HasForeignKey("IdRaca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("IdTutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");

                    b.Navigation("Porte");

                    b.Navigation("Raca");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Unipet.Models.Plano", b =>
                {
                    b.HasOne("Unipet.Models.AreaCobertura", "AreaCobertura")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaCobertura");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Unipet.Models.Prestador", b =>
                {
                    b.HasOne("Unipet.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Unipet.Models.PrestadorEmpresa", b =>
                {
                    b.HasOne("Unipet.Models.Empresa", "Empresa")
                        .WithMany("PrestoresEmpresa")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Prestador", "Prestador")
                        .WithMany("PrestadorEmpresas")
                        .HasForeignKey("IdPrestador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Prestador");
                });

            modelBuilder.Entity("Unipet.Models.Raca", b =>
                {
                    b.HasOne("Unipet.Models.Especie", "Especie")
                        .WithMany()
                        .HasForeignKey("IdEspecie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");
                });

            modelBuilder.Entity("Unipet.Models.Tutor", b =>
                {
                    b.HasOne("Unipet.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unipet.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Unipet.Models.Empresa", b =>
                {
                    b.Navigation("PrestoresEmpresa");
                });

            modelBuilder.Entity("Unipet.Models.Especialidade", b =>
                {
                    b.Navigation("EspecialidadesPlanos");
                });

            modelBuilder.Entity("Unipet.Models.Plano", b =>
                {
                    b.Navigation("EspecialidadesPlanos");
                });

            modelBuilder.Entity("Unipet.Models.Prestador", b =>
                {
                    b.Navigation("PrestadorEmpresas");
                });
#pragma warning restore 612, 618
        }
    }
}
